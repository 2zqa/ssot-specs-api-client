/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SwapDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwapDevice{}

// SwapDevice struct for SwapDevice
type SwapDevice struct {
	Name *string `json:"name,omitempty"`
	Size *int64 `json:"size,omitempty"`
}

// NewSwapDevice instantiates a new SwapDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapDevice() *SwapDevice {
	this := SwapDevice{}
	return &this
}

// NewSwapDeviceWithDefaults instantiates a new SwapDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapDeviceWithDefaults() *SwapDevice {
	this := SwapDevice{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SwapDevice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDevice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SwapDevice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SwapDevice) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SwapDevice) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapDevice) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SwapDevice) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *SwapDevice) SetSize(v int64) {
	o.Size = &v
}

func (o SwapDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwapDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableSwapDevice struct {
	value *SwapDevice
	isSet bool
}

func (v NullableSwapDevice) Get() *SwapDevice {
	return v.value
}

func (v *NullableSwapDevice) Set(val *SwapDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapDevice(val *SwapDevice) *NullableSwapDevice {
	return &NullableSwapDevice{value: val, isSet: true}
}

func (v NullableSwapDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


