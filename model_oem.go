/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OEM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OEM{}

// OEM struct for OEM
type OEM struct {
	Manufacturer *string `json:"manufacturer,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
}

// NewOEM instantiates a new OEM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOEM() *OEM {
	this := OEM{}
	return &this
}

// NewOEMWithDefaults instantiates a new OEM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOEMWithDefaults() *OEM {
	this := OEM{}
	return &this
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *OEM) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OEM) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *OEM) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *OEM) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *OEM) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OEM) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *OEM) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *OEM) SetProductName(v string) {
	o.ProductName = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *OEM) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OEM) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *OEM) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *OEM) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

func (o OEM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OEM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.ProductName) {
		toSerialize["product_name"] = o.ProductName
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	return toSerialize, nil
}

type NullableOEM struct {
	value *OEM
	isSet bool
}

func (v NullableOEM) Get() *OEM {
	return v.value
}

func (v *NullableOEM) Set(val *OEM) {
	v.value = val
	v.isSet = true
}

func (v NullableOEM) IsSet() bool {
	return v.isSet
}

func (v *NullableOEM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOEM(val *OEM) *NullableOEM {
	return &NullableOEM{value: val, isSet: true}
}

func (v NullableOEM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOEM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


