/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Partition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Partition{}

// Partition struct for Partition
type Partition struct {
	Filesystem *string `json:"filesystem,omitempty"`
	// Amount of megabytes the partition can store
	CapacityMegabytes *int64 `json:"capacity_megabytes,omitempty"`
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// NewPartition instantiates a new Partition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartition() *Partition {
	this := Partition{}
	return &this
}

// NewPartitionWithDefaults instantiates a new Partition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionWithDefaults() *Partition {
	this := Partition{}
	return &this
}

// GetFilesystem returns the Filesystem field value if set, zero value otherwise.
func (o *Partition) GetFilesystem() string {
	if o == nil || IsNil(o.Filesystem) {
		var ret string
		return ret
	}
	return *o.Filesystem
}

// GetFilesystemOk returns a tuple with the Filesystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetFilesystemOk() (*string, bool) {
	if o == nil || IsNil(o.Filesystem) {
		return nil, false
	}
	return o.Filesystem, true
}

// HasFilesystem returns a boolean if a field has been set.
func (o *Partition) HasFilesystem() bool {
	if o != nil && !IsNil(o.Filesystem) {
		return true
	}

	return false
}

// SetFilesystem gets a reference to the given string and assigns it to the Filesystem field.
func (o *Partition) SetFilesystem(v string) {
	o.Filesystem = &v
}

// GetCapacityMegabytes returns the CapacityMegabytes field value if set, zero value otherwise.
func (o *Partition) GetCapacityMegabytes() int64 {
	if o == nil || IsNil(o.CapacityMegabytes) {
		var ret int64
		return ret
	}
	return *o.CapacityMegabytes
}

// GetCapacityMegabytesOk returns a tuple with the CapacityMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetCapacityMegabytesOk() (*int64, bool) {
	if o == nil || IsNil(o.CapacityMegabytes) {
		return nil, false
	}
	return o.CapacityMegabytes, true
}

// HasCapacityMegabytes returns a boolean if a field has been set.
func (o *Partition) HasCapacityMegabytes() bool {
	if o != nil && !IsNil(o.CapacityMegabytes) {
		return true
	}

	return false
}

// SetCapacityMegabytes gets a reference to the given int64 and assigns it to the CapacityMegabytes field.
func (o *Partition) SetCapacityMegabytes(v int64) {
	o.CapacityMegabytes = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Partition) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Partition) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Partition) SetSource(v string) {
	o.Source = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Partition) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Partition) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *Partition) SetTarget(v string) {
	o.Target = &v
}

func (o Partition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Partition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filesystem) {
		toSerialize["filesystem"] = o.Filesystem
	}
	if !IsNil(o.CapacityMegabytes) {
		toSerialize["capacity_megabytes"] = o.CapacityMegabytes
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

type NullablePartition struct {
	value *Partition
	isSet bool
}

func (v NullablePartition) Get() *Partition {
	return v.value
}

func (v *NullablePartition) Set(val *Partition) {
	v.value = val
	v.isSet = true
}

func (v NullablePartition) IsSet() bool {
	return v.isSet
}

func (v *NullablePartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartition(val *Partition) *NullablePartition {
	return &NullablePartition{value: val, isSet: true}
}

func (v NullablePartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


