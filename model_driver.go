/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Driver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Driver{}

// Driver struct for Driver
type Driver struct {
	Name *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
	FirmwareVersion *string `json:"firmware_version,omitempty"`
}

// NewDriver instantiates a new Driver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriver() *Driver {
	this := Driver{}
	return &this
}

// NewDriverWithDefaults instantiates a new Driver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriverWithDefaults() *Driver {
	this := Driver{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Driver) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Driver) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Driver) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Driver) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Driver) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Driver) SetVersion(v string) {
	o.Version = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *Driver) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *Driver) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *Driver) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

func (o Driver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Driver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["firmware_version"] = o.FirmwareVersion
	}
	return toSerialize, nil
}

type NullableDriver struct {
	value *Driver
	isSet bool
}

func (v NullableDriver) Get() *Driver {
	return v.value
}

func (v *NullableDriver) Set(val *Driver) {
	v.value = val
	v.isSet = true
}

func (v NullableDriver) IsSet() bool {
	return v.isSet
}

func (v *NullableDriver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriver(val *Driver) *NullableDriver {
	return &NullableDriver{value: val, isSet: true}
}

func (v NullableDriver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


