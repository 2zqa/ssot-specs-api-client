/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevicesGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesGet200Response{}

// DevicesGet200Response struct for DevicesGet200Response
type DevicesGet200Response struct {
	Devices []Device `json:"devices,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
}

// NewDevicesGet200Response instantiates a new DevicesGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesGet200Response() *DevicesGet200Response {
	this := DevicesGet200Response{}
	return &this
}

// NewDevicesGet200ResponseWithDefaults instantiates a new DevicesGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesGet200ResponseWithDefaults() *DevicesGet200Response {
	this := DevicesGet200Response{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *DevicesGet200Response) GetDevices() []Device {
	if o == nil || IsNil(o.Devices) {
		var ret []Device
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesGet200Response) GetDevicesOk() ([]Device, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *DevicesGet200Response) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []Device and assigns it to the Devices field.
func (o *DevicesGet200Response) SetDevices(v []Device) {
	o.Devices = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DevicesGet200Response) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesGet200Response) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DevicesGet200Response) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *DevicesGet200Response) SetMetadata(v Metadata) {
	o.Metadata = &v
}

func (o DevicesGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableDevicesGet200Response struct {
	value *DevicesGet200Response
	isSet bool
}

func (v NullableDevicesGet200Response) Get() *DevicesGet200Response {
	return v.value
}

func (v *NullableDevicesGet200Response) Set(val *DevicesGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesGet200Response(val *DevicesGet200Response) *NullableDevicesGet200Response {
	return &NullableDevicesGet200Response{value: val, isSet: true}
}

func (v NullableDevicesGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


