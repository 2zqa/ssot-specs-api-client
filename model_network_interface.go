/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NetworkInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInterface{}

// NetworkInterface struct for NetworkInterface
type NetworkInterface struct {
	// MAC address of the interface formatted in six groups of two hexadecimal digits, separated by colons
	MacAddress *string `json:"mac_address,omitempty"`
	Driver *Driver `json:"driver,omitempty"`
	Ipv4Addresses []string `json:"ipv4_addresses,omitempty"`
	Ipv6Addresses []string `json:"ipv6_addresses,omitempty"`
}

// NewNetworkInterface instantiates a new NetworkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterface() *NetworkInterface {
	this := NetworkInterface{}
	return &this
}

// NewNetworkInterfaceWithDefaults instantiates a new NetworkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceWithDefaults() *NetworkInterface {
	this := NetworkInterface{}
	return &this
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *NetworkInterface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterface) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkInterface) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *NetworkInterface) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *NetworkInterface) GetDriver() Driver {
	if o == nil || IsNil(o.Driver) {
		var ret Driver
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterface) GetDriverOk() (*Driver, bool) {
	if o == nil || IsNil(o.Driver) {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *NetworkInterface) HasDriver() bool {
	if o != nil && !IsNil(o.Driver) {
		return true
	}

	return false
}

// SetDriver gets a reference to the given Driver and assigns it to the Driver field.
func (o *NetworkInterface) SetDriver(v Driver) {
	o.Driver = &v
}

// GetIpv4Addresses returns the Ipv4Addresses field value if set, zero value otherwise.
func (o *NetworkInterface) GetIpv4Addresses() []string {
	if o == nil || IsNil(o.Ipv4Addresses) {
		var ret []string
		return ret
	}
	return o.Ipv4Addresses
}

// GetIpv4AddressesOk returns a tuple with the Ipv4Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterface) GetIpv4AddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv4Addresses) {
		return nil, false
	}
	return o.Ipv4Addresses, true
}

// HasIpv4Addresses returns a boolean if a field has been set.
func (o *NetworkInterface) HasIpv4Addresses() bool {
	if o != nil && !IsNil(o.Ipv4Addresses) {
		return true
	}

	return false
}

// SetIpv4Addresses gets a reference to the given []string and assigns it to the Ipv4Addresses field.
func (o *NetworkInterface) SetIpv4Addresses(v []string) {
	o.Ipv4Addresses = v
}

// GetIpv6Addresses returns the Ipv6Addresses field value if set, zero value otherwise.
func (o *NetworkInterface) GetIpv6Addresses() []string {
	if o == nil || IsNil(o.Ipv6Addresses) {
		var ret []string
		return ret
	}
	return o.Ipv6Addresses
}

// GetIpv6AddressesOk returns a tuple with the Ipv6Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterface) GetIpv6AddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6Addresses) {
		return nil, false
	}
	return o.Ipv6Addresses, true
}

// HasIpv6Addresses returns a boolean if a field has been set.
func (o *NetworkInterface) HasIpv6Addresses() bool {
	if o != nil && !IsNil(o.Ipv6Addresses) {
		return true
	}

	return false
}

// SetIpv6Addresses gets a reference to the given []string and assigns it to the Ipv6Addresses field.
func (o *NetworkInterface) SetIpv6Addresses(v []string) {
	o.Ipv6Addresses = v
}

func (o NetworkInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.Driver) {
		toSerialize["driver"] = o.Driver
	}
	if !IsNil(o.Ipv4Addresses) {
		toSerialize["ipv4_addresses"] = o.Ipv4Addresses
	}
	if !IsNil(o.Ipv6Addresses) {
		toSerialize["ipv6_addresses"] = o.Ipv6Addresses
	}
	return toSerialize, nil
}

type NullableNetworkInterface struct {
	value *NetworkInterface
	isSet bool
}

func (v NullableNetworkInterface) Get() *NetworkInterface {
	return v.value
}

func (v *NullableNetworkInterface) Set(val *NetworkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterface(val *NetworkInterface) *NullableNetworkInterface {
	return &NullableNetworkInterface{value: val, isSet: true}
}

func (v NullableNetworkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


