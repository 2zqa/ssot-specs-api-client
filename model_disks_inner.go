/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DisksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisksInner{}

// DisksInner struct for DisksInner
type DisksInner struct {
	// Model name
	Name *string `json:"name,omitempty"`
	// Size in megabytes
	SizeMegabytes *int64 `json:"size_megabytes,omitempty"`
	Partitions []Partition `json:"partitions,omitempty"`
}

// NewDisksInner instantiates a new DisksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisksInner() *DisksInner {
	this := DisksInner{}
	return &this
}

// NewDisksInnerWithDefaults instantiates a new DisksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisksInnerWithDefaults() *DisksInner {
	this := DisksInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DisksInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisksInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DisksInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DisksInner) SetName(v string) {
	o.Name = &v
}

// GetSizeMegabytes returns the SizeMegabytes field value if set, zero value otherwise.
func (o *DisksInner) GetSizeMegabytes() int64 {
	if o == nil || IsNil(o.SizeMegabytes) {
		var ret int64
		return ret
	}
	return *o.SizeMegabytes
}

// GetSizeMegabytesOk returns a tuple with the SizeMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisksInner) GetSizeMegabytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeMegabytes) {
		return nil, false
	}
	return o.SizeMegabytes, true
}

// HasSizeMegabytes returns a boolean if a field has been set.
func (o *DisksInner) HasSizeMegabytes() bool {
	if o != nil && !IsNil(o.SizeMegabytes) {
		return true
	}

	return false
}

// SetSizeMegabytes gets a reference to the given int64 and assigns it to the SizeMegabytes field.
func (o *DisksInner) SetSizeMegabytes(v int64) {
	o.SizeMegabytes = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *DisksInner) GetPartitions() []Partition {
	if o == nil || IsNil(o.Partitions) {
		var ret []Partition
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisksInner) GetPartitionsOk() ([]Partition, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *DisksInner) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []Partition and assigns it to the Partitions field.
func (o *DisksInner) SetPartitions(v []Partition) {
	o.Partitions = v
}

func (o DisksInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SizeMegabytes) {
		toSerialize["size_megabytes"] = o.SizeMegabytes
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

type NullableDisksInner struct {
	value *DisksInner
	isSet bool
}

func (v NullableDisksInner) Get() *DisksInner {
	return v.value
}

func (v *NullableDisksInner) Set(val *DisksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDisksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDisksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisksInner(val *DisksInner) *NullableDisksInner {
	return &NullableDisksInner{value: val, isSet: true}
}

func (v NullableDisksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


