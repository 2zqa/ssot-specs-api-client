/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Specs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Specs{}

// Specs struct for Specs
type Specs struct {
	Motherboard *Motherboard `json:"motherboard,omitempty"`
	Cpu *CPU `json:"cpu,omitempty"`
	Disks []DisksInner `json:"disks,omitempty"`
	Network *Network `json:"network,omitempty"`
	Bios *BIOS `json:"bios,omitempty"`
	Memory *Memory `json:"memory,omitempty"`
	Dimms []DIMMsInner `json:"dimms,omitempty"`
	// ISO 8601 formatted date-time string of the time the device booted
	BootTime *time.Time `json:"boot_time,omitempty"`
	Kernel *Kernel `json:"kernel,omitempty"`
	Release *Release `json:"release,omitempty"`
	Oem *OEM `json:"oem,omitempty"`
	Virtualization *Virtualization `json:"virtualization,omitempty"`
}

// NewSpecs instantiates a new Specs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecs() *Specs {
	this := Specs{}
	return &this
}

// NewSpecsWithDefaults instantiates a new Specs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecsWithDefaults() *Specs {
	this := Specs{}
	return &this
}

// GetMotherboard returns the Motherboard field value if set, zero value otherwise.
func (o *Specs) GetMotherboard() Motherboard {
	if o == nil || IsNil(o.Motherboard) {
		var ret Motherboard
		return ret
	}
	return *o.Motherboard
}

// GetMotherboardOk returns a tuple with the Motherboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetMotherboardOk() (*Motherboard, bool) {
	if o == nil || IsNil(o.Motherboard) {
		return nil, false
	}
	return o.Motherboard, true
}

// HasMotherboard returns a boolean if a field has been set.
func (o *Specs) HasMotherboard() bool {
	if o != nil && !IsNil(o.Motherboard) {
		return true
	}

	return false
}

// SetMotherboard gets a reference to the given Motherboard and assigns it to the Motherboard field.
func (o *Specs) SetMotherboard(v Motherboard) {
	o.Motherboard = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Specs) GetCpu() CPU {
	if o == nil || IsNil(o.Cpu) {
		var ret CPU
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetCpuOk() (*CPU, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Specs) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given CPU and assigns it to the Cpu field.
func (o *Specs) SetCpu(v CPU) {
	o.Cpu = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *Specs) GetDisks() []DisksInner {
	if o == nil || IsNil(o.Disks) {
		var ret []DisksInner
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetDisksOk() ([]DisksInner, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *Specs) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []DisksInner and assigns it to the Disks field.
func (o *Specs) SetDisks(v []DisksInner) {
	o.Disks = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Specs) GetNetwork() Network {
	if o == nil || IsNil(o.Network) {
		var ret Network
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetNetworkOk() (*Network, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Specs) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given Network and assigns it to the Network field.
func (o *Specs) SetNetwork(v Network) {
	o.Network = &v
}

// GetBios returns the Bios field value if set, zero value otherwise.
func (o *Specs) GetBios() BIOS {
	if o == nil || IsNil(o.Bios) {
		var ret BIOS
		return ret
	}
	return *o.Bios
}

// GetBiosOk returns a tuple with the Bios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetBiosOk() (*BIOS, bool) {
	if o == nil || IsNil(o.Bios) {
		return nil, false
	}
	return o.Bios, true
}

// HasBios returns a boolean if a field has been set.
func (o *Specs) HasBios() bool {
	if o != nil && !IsNil(o.Bios) {
		return true
	}

	return false
}

// SetBios gets a reference to the given BIOS and assigns it to the Bios field.
func (o *Specs) SetBios(v BIOS) {
	o.Bios = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Specs) GetMemory() Memory {
	if o == nil || IsNil(o.Memory) {
		var ret Memory
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetMemoryOk() (*Memory, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Specs) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given Memory and assigns it to the Memory field.
func (o *Specs) SetMemory(v Memory) {
	o.Memory = &v
}

// GetDimms returns the Dimms field value if set, zero value otherwise.
func (o *Specs) GetDimms() []DIMMsInner {
	if o == nil || IsNil(o.Dimms) {
		var ret []DIMMsInner
		return ret
	}
	return o.Dimms
}

// GetDimmsOk returns a tuple with the Dimms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetDimmsOk() ([]DIMMsInner, bool) {
	if o == nil || IsNil(o.Dimms) {
		return nil, false
	}
	return o.Dimms, true
}

// HasDimms returns a boolean if a field has been set.
func (o *Specs) HasDimms() bool {
	if o != nil && !IsNil(o.Dimms) {
		return true
	}

	return false
}

// SetDimms gets a reference to the given []DIMMsInner and assigns it to the Dimms field.
func (o *Specs) SetDimms(v []DIMMsInner) {
	o.Dimms = v
}

// GetBootTime returns the BootTime field value if set, zero value otherwise.
func (o *Specs) GetBootTime() time.Time {
	if o == nil || IsNil(o.BootTime) {
		var ret time.Time
		return ret
	}
	return *o.BootTime
}

// GetBootTimeOk returns a tuple with the BootTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetBootTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BootTime) {
		return nil, false
	}
	return o.BootTime, true
}

// HasBootTime returns a boolean if a field has been set.
func (o *Specs) HasBootTime() bool {
	if o != nil && !IsNil(o.BootTime) {
		return true
	}

	return false
}

// SetBootTime gets a reference to the given time.Time and assigns it to the BootTime field.
func (o *Specs) SetBootTime(v time.Time) {
	o.BootTime = &v
}

// GetKernel returns the Kernel field value if set, zero value otherwise.
func (o *Specs) GetKernel() Kernel {
	if o == nil || IsNil(o.Kernel) {
		var ret Kernel
		return ret
	}
	return *o.Kernel
}

// GetKernelOk returns a tuple with the Kernel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetKernelOk() (*Kernel, bool) {
	if o == nil || IsNil(o.Kernel) {
		return nil, false
	}
	return o.Kernel, true
}

// HasKernel returns a boolean if a field has been set.
func (o *Specs) HasKernel() bool {
	if o != nil && !IsNil(o.Kernel) {
		return true
	}

	return false
}

// SetKernel gets a reference to the given Kernel and assigns it to the Kernel field.
func (o *Specs) SetKernel(v Kernel) {
	o.Kernel = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *Specs) GetRelease() Release {
	if o == nil || IsNil(o.Release) {
		var ret Release
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetReleaseOk() (*Release, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *Specs) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given Release and assigns it to the Release field.
func (o *Specs) SetRelease(v Release) {
	o.Release = &v
}

// GetOem returns the Oem field value if set, zero value otherwise.
func (o *Specs) GetOem() OEM {
	if o == nil || IsNil(o.Oem) {
		var ret OEM
		return ret
	}
	return *o.Oem
}

// GetOemOk returns a tuple with the Oem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetOemOk() (*OEM, bool) {
	if o == nil || IsNil(o.Oem) {
		return nil, false
	}
	return o.Oem, true
}

// HasOem returns a boolean if a field has been set.
func (o *Specs) HasOem() bool {
	if o != nil && !IsNil(o.Oem) {
		return true
	}

	return false
}

// SetOem gets a reference to the given OEM and assigns it to the Oem field.
func (o *Specs) SetOem(v OEM) {
	o.Oem = &v
}

// GetVirtualization returns the Virtualization field value if set, zero value otherwise.
func (o *Specs) GetVirtualization() Virtualization {
	if o == nil || IsNil(o.Virtualization) {
		var ret Virtualization
		return ret
	}
	return *o.Virtualization
}

// GetVirtualizationOk returns a tuple with the Virtualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Specs) GetVirtualizationOk() (*Virtualization, bool) {
	if o == nil || IsNil(o.Virtualization) {
		return nil, false
	}
	return o.Virtualization, true
}

// HasVirtualization returns a boolean if a field has been set.
func (o *Specs) HasVirtualization() bool {
	if o != nil && !IsNil(o.Virtualization) {
		return true
	}

	return false
}

// SetVirtualization gets a reference to the given Virtualization and assigns it to the Virtualization field.
func (o *Specs) SetVirtualization(v Virtualization) {
	o.Virtualization = &v
}

func (o Specs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Specs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Motherboard) {
		toSerialize["motherboard"] = o.Motherboard
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Bios) {
		toSerialize["bios"] = o.Bios
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Dimms) {
		toSerialize["dimms"] = o.Dimms
	}
	if !IsNil(o.BootTime) {
		toSerialize["boot_time"] = o.BootTime
	}
	if !IsNil(o.Kernel) {
		toSerialize["kernel"] = o.Kernel
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Oem) {
		toSerialize["oem"] = o.Oem
	}
	if !IsNil(o.Virtualization) {
		toSerialize["virtualization"] = o.Virtualization
	}
	return toSerialize, nil
}

type NullableSpecs struct {
	value *Specs
	isSet bool
}

func (v NullableSpecs) Get() *Specs {
	return v.value
}

func (v *NullableSpecs) Set(val *Specs) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecs) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecs(val *Specs) *NullableSpecs {
	return &NullableSpecs{value: val, isSet: true}
}

func (v NullableSpecs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


