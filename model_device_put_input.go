/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevicePutInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicePutInput{}

// DevicePutInput struct for DevicePutInput
type DevicePutInput struct {
	Specs *Specs `json:"specs,omitempty"`
}

// NewDevicePutInput instantiates a new DevicePutInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicePutInput() *DevicePutInput {
	this := DevicePutInput{}
	return &this
}

// NewDevicePutInputWithDefaults instantiates a new DevicePutInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicePutInputWithDefaults() *DevicePutInput {
	this := DevicePutInput{}
	return &this
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *DevicePutInput) GetSpecs() Specs {
	if o == nil || IsNil(o.Specs) {
		var ret Specs
		return ret
	}
	return *o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePutInput) GetSpecsOk() (*Specs, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *DevicePutInput) HasSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given Specs and assigns it to the Specs field.
func (o *DevicePutInput) SetSpecs(v Specs) {
	o.Specs = &v
}

func (o DevicePutInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicePutInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	return toSerialize, nil
}

type NullableDevicePutInput struct {
	value *DevicePutInput
	isSet bool
}

func (v NullableDevicePutInput) Get() *DevicePutInput {
	return v.value
}

func (v *NullableDevicePutInput) Set(val *DevicePutInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePutInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePutInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePutInput(val *DevicePutInput) *NullableDevicePutInput {
	return &NullableDevicePutInput{value: val, isSet: true}
}

func (v NullableDevicePutInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePutInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


