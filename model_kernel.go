/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Kernel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kernel{}

// Kernel struct for Kernel
type Kernel struct {
	Name *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewKernel instantiates a new Kernel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKernel() *Kernel {
	this := Kernel{}
	return &this
}

// NewKernelWithDefaults instantiates a new Kernel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKernelWithDefaults() *Kernel {
	this := Kernel{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Kernel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kernel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Kernel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Kernel) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Kernel) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kernel) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Kernel) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Kernel) SetVersion(v string) {
	o.Version = &v
}

func (o Kernel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kernel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableKernel struct {
	value *Kernel
	isSet bool
}

func (v NullableKernel) Get() *Kernel {
	return v.value
}

func (v *NullableKernel) Set(val *Kernel) {
	v.value = val
	v.isSet = true
}

func (v NullableKernel) IsSet() bool {
	return v.isSet
}

func (v *NullableKernel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKernel(val *Kernel) *NullableKernel {
	return &NullableKernel{value: val, isSet: true}
}

func (v NullableKernel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKernel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


