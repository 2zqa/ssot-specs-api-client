/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BIOS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BIOS{}

// BIOS struct for BIOS
type BIOS struct {
	Vendor *string `json:"vendor,omitempty"`
	// Version as reported by the BIOS
	Version *string `json:"version,omitempty"`
	// Date the BIOS was released in ISO 8601 format
	Date *string `json:"date,omitempty"`
}

// NewBIOS instantiates a new BIOS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBIOS() *BIOS {
	this := BIOS{}
	return &this
}

// NewBIOSWithDefaults instantiates a new BIOS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBIOSWithDefaults() *BIOS {
	this := BIOS{}
	return &this
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *BIOS) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BIOS) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *BIOS) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *BIOS) SetVendor(v string) {
	o.Vendor = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *BIOS) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BIOS) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *BIOS) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *BIOS) SetVersion(v string) {
	o.Version = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BIOS) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BIOS) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BIOS) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BIOS) SetDate(v string) {
	o.Date = &v
}

func (o BIOS) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BIOS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableBIOS struct {
	value *BIOS
	isSet bool
}

func (v NullableBIOS) Get() *BIOS {
	return v.value
}

func (v *NullableBIOS) Set(val *BIOS) {
	v.value = val
	v.isSet = true
}

func (v NullableBIOS) IsSet() bool {
	return v.isSet
}

func (v *NullableBIOS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBIOS(val *BIOS) *NullableBIOS {
	return &NullableBIOS{value: val, isSet: true}
}

func (v NullableBIOS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBIOS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


