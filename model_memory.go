/*
SSOT API

This page describes the api endpoints for single source of truth infra project

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Memory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Memory{}

// Memory struct for Memory
type Memory struct {
	// Total memory installed on device in megabytes
	Memory *int64 `json:"memory,omitempty"`
	// Total swap memory installed on device in megabytes
	Swap *int64 `json:"swap,omitempty"`
	SwapDevices []SwapDevice `json:"swap_devices,omitempty"`
}

// NewMemory instantiates a new Memory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemory() *Memory {
	this := Memory{}
	return &this
}

// NewMemoryWithDefaults instantiates a new Memory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryWithDefaults() *Memory {
	this := Memory{}
	return &this
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Memory) GetMemory() int64 {
	if o == nil || IsNil(o.Memory) {
		var ret int64
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Memory) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int64 and assigns it to the Memory field.
func (o *Memory) SetMemory(v int64) {
	o.Memory = &v
}

// GetSwap returns the Swap field value if set, zero value otherwise.
func (o *Memory) GetSwap() int64 {
	if o == nil || IsNil(o.Swap) {
		var ret int64
		return ret
	}
	return *o.Swap
}

// GetSwapOk returns a tuple with the Swap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetSwapOk() (*int64, bool) {
	if o == nil || IsNil(o.Swap) {
		return nil, false
	}
	return o.Swap, true
}

// HasSwap returns a boolean if a field has been set.
func (o *Memory) HasSwap() bool {
	if o != nil && !IsNil(o.Swap) {
		return true
	}

	return false
}

// SetSwap gets a reference to the given int64 and assigns it to the Swap field.
func (o *Memory) SetSwap(v int64) {
	o.Swap = &v
}

// GetSwapDevices returns the SwapDevices field value if set, zero value otherwise.
func (o *Memory) GetSwapDevices() []SwapDevice {
	if o == nil || IsNil(o.SwapDevices) {
		var ret []SwapDevice
		return ret
	}
	return o.SwapDevices
}

// GetSwapDevicesOk returns a tuple with the SwapDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetSwapDevicesOk() ([]SwapDevice, bool) {
	if o == nil || IsNil(o.SwapDevices) {
		return nil, false
	}
	return o.SwapDevices, true
}

// HasSwapDevices returns a boolean if a field has been set.
func (o *Memory) HasSwapDevices() bool {
	if o != nil && !IsNil(o.SwapDevices) {
		return true
	}

	return false
}

// SetSwapDevices gets a reference to the given []SwapDevice and assigns it to the SwapDevices field.
func (o *Memory) SetSwapDevices(v []SwapDevice) {
	o.SwapDevices = v
}

func (o Memory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Memory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Swap) {
		toSerialize["swap"] = o.Swap
	}
	if !IsNil(o.SwapDevices) {
		toSerialize["swap_devices"] = o.SwapDevices
	}
	return toSerialize, nil
}

type NullableMemory struct {
	value *Memory
	isSet bool
}

func (v NullableMemory) Get() *Memory {
	return v.value
}

func (v *NullableMemory) Set(val *Memory) {
	v.value = val
	v.isSet = true
}

func (v NullableMemory) IsSet() bool {
	return v.isSet
}

func (v *NullableMemory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemory(val *Memory) *NullableMemory {
	return &NullableMemory{value: val, isSet: true}
}

func (v NullableMemory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


